#!/bin/bash
# 


# 
# Check input argument
# 
if [[ $# -lt 0 ]]; then
    echo "Usage: "
    echo "    a3cosmos-prior-extraction-photometry-print-fitted-fits-image-as-png"
    echo "Input: "
    echo "    A directory containing fits images."
    echo "Output: "
    echo "    Output png images to \"output_directory\"."
    echo ""
    exit
fi


# 
# Check supermongo and necessary files
# 
if [[ $(type ds9 2>/dev/null | wc -l) -eq 0 ]]; then
    echo "Error! ds9 was not installed!"
    exit 1
fi
if [[ $(type CrabFitsHeader 2>/dev/null | wc -l) -eq 0 ]]; then
    if [[ -f $(dirname $(dirname "${BASH_SOURCE[0]}"))/Pipeline/SETUP.bash ]]; then
        source $(dirname $(dirname "${BASH_SOURCE[0]}"))/Pipeline/SETUP.bash
    fi
    if [[ -f $(dirname $(dirname "${BASH_SOURCE[0]}"))/Softwares/SETUP.bash ]]; then
        source $(dirname $(dirname "${BASH_SOURCE[0]}"))/Softwares/SETUP.bash
    fi
fi
if [[ $(type CrabFitsHeader 2>/dev/null | wc -l) -eq 0 ]]; then
    if [[ -f $(dirname "${BASH_SOURCE[0]}")/SETUP.bash ]]; then
        source $(dirname "${BASH_SOURCE[0]}")/SETUP.bash
    fi
    echo "Error! CrabFitsHeader was not installed!"
    exit 1
fi


# 
# Read Input cat
# 
if [[ $(hostname) == "aida"* ]]; then
InputDir_fits="/disk1/dzliu/Works/AlmaCosmos/Photometry/ALMA_Calibrated_Images_by_Magnelli/v20180102/fits" # the place where we can find "${Image_name}.fits.pixel.statistics.txt"
else
InputDir_fits="fits" # the place where we can find "${Image_name}.pixel.statistics.txt"
fi
InputDir_fitted_fits="Prior_Extraction_with_Master_Catalog_v20180106_fit_2_fits" # the place where we can find "*.-.fit_2.fits"

if [[ ! -d "$InputDir_fits" ]]; then
    echo "Error! \"$InputDir_fits\" was not found!"; exit
fi
if [[ ! -d "$InputDir_fitted_fits" ]]; then
    echo "Error! \"$InputDir_fitted_fits\" was not found!"; exit
fi


# 
# Set Output dir
# 
OutputDir="Prior_Extraction_with_Master_Catalog_v20180106_fit_2_png"
if [[ ! -d "$OutputDir" ]]; then
    mkdir -p "$OutputDir"
fi


# 
# Set locale for fixing python localename problem
# 
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8


# 
# Software dependency
# 
#if [[ $(type almacosmos_get_fits_image_pixel_histogram.py 2>/dev/null | wc -l) -eq 0 ]]; then
#    if [[ -f "$(dirname $(dirname ${BASH_SOURCE[0]}))/Softwares/SETUP.bash" ]]; then
#        source "$(dirname $(dirname ${BASH_SOURCE[0]}))/Softwares/SETUP.bash"
#    else
#        echo "Error! \"almacosmos_get_fits_image_pixel_histogram.py\" was not found in \$PATH!"
#        exit
#    fi
#fi


# 
# Prepare output array
# 
Source_names=()
Image_rms=()


# 
# Loop 
# 
Has_print_head=0

Image_input=($(ls -1 "${InputDir_fitted_fits}"/*.-.fit_2.fits))

for (( i=0; i<${#Image_input[@]}; i++ )); do
    # 
    Image_dir=$(dirname "${Image_input[i]}")
    # 
    Image_file="${Image_input[i]}"
    if [[ "${Image_input[i]}" == *" "* ]]; then
        # if the image name contains white space
        Image_file=$(basename "${Image_input[i]}" | sed -e 's/ /_/g')
        ln -fsT "${Image_input[i]}" "$Image_file"
    fi
    # 
    Image_name=$(basename "$Image_file" | sed -e 's/.-.fit_2.fits$//g')
    Image_name_split=($(basename "$Image_file" | sed -e 's/.-.fit_2.fits$//g' | perl -p -e 's/(.*)(\.cut_[0-9+-]+_[0-9+-]+_[0-9+-]+_[0-9+-]+)$/\1 \2/g'))
    if [[ "${#Image_name_split[@]}" -eq 2 ]]; then
        Image_name_nocut="${Image_name_split[0]}"
        Image_cut_rect="${Image_name_split[1]}"
    else
        Image_name_nocut="${Image_name_split[@]}"
        Image_cut_rect=""
    fi
    echo "--------------------------------------------------------"
    echo "Image_file = $Image_file"
    echo "Image_name = $Image_name"
    #echo "Image_cut_rect = $Image_cut_rect"
    # 
    if [[ -f "$OutputDir/$Image_name.grey.png" ]] && [[ -f "$OutputDir/$Image_name.aips0.png" ]]; then
        continue
    fi
    # 
    Image_rms_file="${InputDir_fits}/${Image_name_nocut}.fits.pixel.statistics.txt"
    if [[ ! -f "${Image_rms_file}" ]]; then
        echo "Error! \"${Image_rms_file}\" was not found!"; exit
    fi
    # 
    # read fits image rms
    Temp_rms=$(cat "${Image_rms_file}" | grep "Gaussian_sigma *=" | perl -p -e 's/Gaussian_sigma *= *([0-9.+-eE]*)/\1/g') # Jy/beam
    if [[ x"$Temp_rms" == x ]]; then echo ""; echo "Failed to read Gaussian_sigma from \"${Image_rms_file}\""; exit 1; fi
    # 
    scale_limits=($(awk "BEGIN {print (-2.0*($Temp_rms));}") $(awk "BEGIN {print (5.0*($Temp_rms));}"))
    # 
    # read fits image header
    if [[ ! -f "${Image_input[i]}.ds9.reg" ]]; then
        almacosmos_convert_galfit_fits_header_to_ds9_region_file "${Image_input[i]}" "${Image_input[i]}.ds9.reg"
    fi
    # 
    echo ds9 -title "ds_${i}" -multiframe "$Image_file" -tile mode column -scale limits ${scale_limits[0]} ${scale_limits[1]} -lock frame image -lock scale yes -lock colorbar yes -frame delete 1 -geometry 1600x600 -frame 2 -regions load "${Image_input[i]}.ds9.reg" -zoom to fit -saveimage "$OutputDir/$Image_name.grey.png" -quit
         ds9 -title "ds_${i}" -multiframe "$Image_file" -tile mode column -scale limits ${scale_limits[0]} ${scale_limits[1]} -lock frame image -lock scale yes -lock colorbar yes -frame delete 1 -geometry 1600x600 -frame 2 -regions load "${Image_input[i]}.ds9.reg" -zoom to fit -saveimage "$OutputDir/$Image_name.grey.png" -quit
    echo ds9 -title "ds_${i}" -multiframe "$Image_file" -tile mode column -scale limits ${scale_limits[0]} ${scale_limits[1]} -lock frame image -lock scale yes -lock colorbar yes -frame delete 1 -geometry 1600x600 -frame 2 -regions load "${Image_input[i]}.ds9.reg" -zoom to fit -cmap aips0 -saveimage "$OutputDir/$Image_name.aips0.png" -quit
         ds9 -title "ds_${i}" -multiframe "$Image_file" -tile mode column -scale limits ${scale_limits[0]} ${scale_limits[1]} -lock frame image -lock scale yes -lock colorbar yes -frame delete 1 -geometry 1600x600 -frame 2 -regions load "${Image_input[i]}.ds9.reg" -zoom to fit -cmap aips0 -saveimage "$OutputDir/$Image_name.aips0.png" -quit
    # 
    # 
    if [[ "${Image_input[i]}" == *" "* ]]; then
        # if the image name contains white space
        rm "$Image_file"
    fi
    #break
done

echo ""
#echo "Done!"

