plot_simu_stats
    # 
    #  echo "macro read almacosmos_plot_simu_stats.sm plot_simu_stats" | sm
    # 
    # setup
    macro read almacosmos_calc_simu_stats.sm
    read_data_file
    user_define_param_grid
    # 
    # read datatable_correction
    load rfile.sm
    rfile $outdir"/datatable_correction.txt"
    # 
    # check variables 
    define check_ok 1
    foreach var {id rel_S_diff par1 par2} {
        if(!is_vector($var)) {
            define check_ok 0
            print 'Column $var was not found in the input file!\n' {}
        }
    }
    if($check_ok==0) {return}
    # 
    # plot ND
    plot_simu_stats_2D_rel_S_diff_vs_peak_SNR
    !open $outdir"/Plot_rel_S_diff_vs_peak_SNR.pdf"
    
    plot_simu_stats_2D_rel_S_diff_vs_FWHM_maj
    !open $outdir"/Plot_rel_S_diff_vs_FWHM_maj.pdf"
    
    #plot_simu_stats_2D_abs_S_diff_vs_peak_SNR
    
    #plot_simu_stats_2D_nom_S_diff_vs_peak_SNR



plot_simu_stats_2D_rel_S_diff_vs_peak_SNR
    # 
    # make plots
    # 
    load crabPlot.sm
    load crabPlotColorbar.sm
    crabPlotOpenPS $outdir"/Plot_rel_S_diff_vs_peak_SNR.eps"
    crabPlotDefaultPenForBox
    location 7000 30500 16000 30500
    limits $(lg(3)) 2 -2 2
    ticksize -1 10 0 0
    box
    crabPlotDefaultPenForTitle
    xlabel $(par1_str)
    ylabel "(S_{in}-S_{out})/S_{in}"
    # 
    # make colorbar
    if(is_vector(par2_min)) {
        set cbar_min = par2_min
    } else {
        vecminmax par2 cbar_min cbar_max
        set cbar_min = $cbar_min
    }
    if(is_vector(par2_max)) {
        set cbar_max = par2_max
    } else {
        vecminmax par2 cbar_max cbar_max
        set cbar_max = $cbar_max
    }
    plotColorBar 0.6 0.85 0 0 par2 $(cbar_min) $(cbar_max) $(par2_str)
    # 
    # 
    crabPlotDefaultPenForPoints
    ptype 4 1
    lweight 0.8
    expand 0.5
    set sort_xx = lg(par1)
    set sort_yy = rel_S_diff
    set sort_cc = par2_Colors
    sort {sort_cc sort_xx sort_yy}
    foreach var {sort_cc sort_xx sort_yy} {set $var = reverse($var)}
    do i=0,dimen(sort_cc)-1 {
        ctype $(sort_cc[$i])
        set plot_x = sort_xx[$i]
        set plot_y = sort_yy[$i]
        points plot_x plot_y
    }
    # 
    # plot bin cell median and sigma (error bar)
    crabPlotDefaultPenForPoints
    do i=0,dimen(cell_id)-1 {
        set cell_do_plot = 1
        #if(cell_par2_median[$i]>0.5 && cell_par2_median[$i]<2.0) {
        #    set cell_do_plot = 0
        #}
        if(cell_do_plot) {
            set plot_x = lg(cell_par1_median[$i])
            set plot_y = cell_rel_median[$i]
            set plot_err_H68 = cell_rel_scatter_H68[$i]
            set plot_err_L68 = cell_rel_scatter_L68[$i]
            ctype white lweight 6.5
            points plot_x plot_y
            errorbar plot_x plot_y plot_err_H68 2
            errorbar plot_x plot_y plot_err_L68 4
            ctype $(plotColorBar_value2color(cell_par2_median[$i])) lweight 3.5
            points plot_x plot_y
            errorbar plot_x plot_y plot_err_H68 2
            errorbar plot_x plot_y plot_err_L68 4
        }
    }
    # 
    # plot minimum chi2 fitted fbias
    if(is_file($outdir"/best_fit_function_fbias.sm")) {
        !cat $outdir"/best_fit_function_fbias.sm"
        crabPlotDefaultPenForConnect
        foreach par2_val {1.00 1.25 1.75 2.25 2.75 3.25 3.75} {
            ctype $(plotColorBar_value2color($par2_val))
            set x1 = $fx1,$fx2,0.05
            set x1 = 10**x1 # we plot x1 in log, but calculates with x1 in linear
            set x2 = $par2_val
            input $outdir"/best_fit_function_fbias.sm"
            set x1 = lg(x1) # we plot x1 in log, but calculates with x1 in linear
            connect x1 y_fit
        }
    }
    # 
    # plot minimum chi2 fitted ecorr
    if(is_file($outdir"/best_fit_function_ecorr.sm")) {
        !cat $outdir"/best_fit_function_ecorr.sm"
        crabPlotDefaultPenForConnect
        foreach par2_val {1.00 1.25 1.75 2.25 2.75 3.25 3.75} {
            ctype $(plotColorBar_value2color($par2_val))
            set x1 = $fx1,$fx2,0.05
            set x1 = 10**x1 # we plot x1 in log, but calculates with x1 in linear
            set x2 = $par2_val
            input $outdir"/best_fit_function_ecorr.sm"
            print {x1 y_fit}
            set x1 = lg(x1) # we plot x1 in log, but calculates with x1 in linear
            ltype 2
            connect x1 y_fit
            connect x1 (-y_fit)
        }
    }
    # 
    crabPlotDefaultPenForConnect
    ctype default
    ltype 1
    rel $fx1 0 draw $fx2 0
    # 
    location 6500 31000 16500 31000
    crabPlotClosePS



plot_simu_stats_2D_rel_S_diff_vs_FWHM_maj 02
    # 
    # make plots
    # 
    load crabPlot.sm
    load crabPlotColorbar.sm
    crabPlotOpenPS $outdir"/Plot_rel_S_diff_vs_FWHM_maj.eps"
    crabPlotDefaultPenForBox
    location 7000 30500 16000 30500
    limits $(lg(0.5)) $(lg(10.0)) -2 2
    ticksize -1 10 0 0
    box
    crabPlotDefaultPenForTitle
    xlabel $(par2_str)
    ylabel "(S_{in}-S_{out})/S_{in}"
    # 
    # make par1 log
    set par1_log = lg(par1)
    # 
    # make colorbar
    if(is_vector(par1_min)) {
        set cbar_min = lg(par1_min)
    } else {
        vecminmax par1_log cbar_min cbar_max
        set cbar_min = $cbar_min
    }
    if(is_vector(par1_max)) {
        set cbar_max = lg(par1_max)
    } else {
        vecminmax par1_log cbar_max cbar_max
        set cbar_max = $cbar_max
    }
    plotColorBar 0.6 0.85 0 0 par1_log $(cbar_min) $(cbar_max) $(sprintf('\"log %s\"',par1_str))
    # 
    # sort by lg(par2)
    set sort_xx = lg(par2)
    set sort_yy = rel_S_diff
    set sort_cc = par1_log_Colors
    sort {sort_cc sort_xx sort_yy}
    foreach var {sort_cc sort_xx sort_yy} {set $var = reverse($var)}
    # 
    # plot all data points
    crabPlotDefaultPenForPoints
    ptype 4 1 lweight 0.8 expand 0.5
    do i=0,dimen(sort_cc)-1 {
        set data_do_plot = 1
        if($?2) {
            # if input $1 and $2 then show only $1 <= $par <= $2
            if((10**(sort_xx[$i]))<($1) || (10**(sort_xx[$i]))>($2)) {
                set data_do_plot = 0
            }
        }
        if(data_do_plot) {
            ctype $(sort_cc[$i])
            set plot_x = sort_xx[$i]
            set plot_y = sort_yy[$i]
            points plot_x plot_y
        }
    }
    # 
    # plot bin cell median and sigma (error bar)
    crabPlotDefaultPenForPoints
    do i=0,dimen(cell_id)-1 {
        set cell_do_plot = 1
        if($?2) {
            # if input $1 and $2 then show only $1 <= $par <= $2
            if((10**(sort_xx[$i]))<($1) || (10**(sort_xx[$i]))>($2)) {
                set cell_do_plot = 0
            }
        }
        if(cell_do_plot) {
            set plot_x = lg(cell_par2_median[$i])
            set plot_y = cell_rel_median[$i]
            set plot_err_H68 = cell_rel_scatter_H68[$i]
            set plot_err_L68 = cell_rel_scatter_L68[$i]
            ctype white lweight 6.5
            points plot_x plot_y
            errorbar plot_x plot_y plot_err_H68 2
            errorbar plot_x plot_y plot_err_L68 4
            ctype $(plotColorBar_value2color(lg(cell_par1_median[$i]))) lweight 3.5
            points plot_x plot_y
            errorbar plot_x plot_y plot_err_H68 2
            errorbar plot_x plot_y plot_err_L68 4
        }
    }
    # 
    # plot minimum chi2 fitted fbias
    if(is_file($outdir"/best_fit_function_fbias.sm")) {
        !cat $outdir"/best_fit_function_fbias.sm"
        crabPlotDefaultPenForConnect
        set par1_do_plot = {4.0 5.0 10.0 50.0}
        if($?2) {
            # if input $1 and $2 then show only $1 <= $par <= $2
            if((10**(sort_xx[$i]))<($1) || (10**(sort_xx[$i]))>($2)) {
                set par1_do_plot = (($1)+($2))/2.0
            }
        }
        foreach par1_val par1_do_plot {
            ctype $(plotColorBar_value2color(lg($par1_val)))
            set x2 = $fx1,$fx2,0.05
            set x1 = $par1_val
            set x2 = 10**x2
            input $outdir"/best_fit_function_fbias.sm"
            set x2 = lg(x2) # we plot x2 in log, but calculates with x1 in linear
            connect x2 y_fit
        }
    }
    # 
    # plot minimum chi2 fitted ecorr
    if(is_file($outdir"/best_fit_function_ecorr.sm")) {
        !cat $outdir"/best_fit_function_ecorr.sm"
        crabPlotDefaultPenForConnect
        set par1_do_plot = {4.0 5.0 10.0 50.0}
        if($?2) {
            # if input $1 and $2 then show only $1 <= $par <= $2
            if((10**(sort_xx[$i]))<($1) || (10**(sort_xx[$i]))>($2)) {
                set par1_do_plot = (($1)+($2))/2.0
            }
        }
        foreach par1_val par1_do_plot {
            ctype $(plotColorBar_value2color(lg($par1_val)))
            set x2 = $fx1,$fx2,0.05
            set x1 = $par1_val
            set x2 = 10**x2
            input $outdir"/best_fit_function_ecorr.sm"
            set x2 = lg(x2) # we plot x2 in log, but calculates with x1 in linear
            ltype 2
            connect x2 y_fit
            connect x2 (-y_fit)
        }
    }
    # 
    crabPlotDefaultPenForConnect
    ctype default
    ltype 1
    rel $fx1 0 draw $fx2 0
    # 
    location 6500 31000 16500 31000
    crabPlotClosePS



plot_simu_stats_2D_abs_S_diff_vs_peak_SNR
    # 
    # make plots
    # 
    load crabPlot.sm
    load crabPlotColorbar.sm
    crabPlotOpenPS $outdir"/Plot_abs_S_diff_vs_peak_SNR.eps"
    crabPlotDefaultPenForBox
    location 7000 30500 16000 30500
    limits 0 3 -4 4
    ticksize -1 10 0 0
    box
    crabPlotDefaultPenForTitle
    xlabel $(par1_str)
    ylabel "(S_{in}-S_{out})"
    # 
    # make colorbar
    if(is_vector(par2_min)) {
        set cbar_min = par2_min
    } else {
        vecminmax par2 cbar_min cbar_max
        set cbar_min = $cbar_min
    }
    if(is_vector(par2_max)) {
        set cbar_max = par2_max
    } else {
        vecminmax par2 cbar_max cbar_max
        set cbar_max = $cbar_max
    }
    plotColorBar 0.6 0.85 0 0 par2 $(cbar_min) $(cbar_max) $(par2_str)
    # 
    crabPlotDefaultPenForPoints
    ptype 4 1
    lweight 0.8
    expand 0.5
    set sort_xx = lg(par1)
    set sort_yy = S_diff
    set sort_cc = par2_Colors
    sort {sort_cc sort_xx sort_yy}
    foreach var {sort_cc sort_xx sort_yy} {set $var = reverse($var)}
    do i=0,dimen(sort_cc)-1 {
        ctype $(sort_cc[$i])
        set plot_x = sort_xx[$i]
        set plot_y = sort_yy[$i]
        points plot_x plot_y
    }
    # 
    # plot bin cell median and sigma (error bar)
    crabPlotDefaultPenForPoints
    do i=0,dimen(cell_id)-1 {
        set plot_x = lg(cell_par1_median[$i])
        set plot_y = cell_median[$i]
        set plot_err_H68 = cell_scatter[$i]
        set plot_err_L68 = cell_scatter[$i]
        ctype white lweight 6.5
        points plot_x plot_y
        errorbar plot_x plot_y plot_err_H68 2
        errorbar plot_x plot_y plot_err_L68 4
        ctype $(plotColorBar_value2color(cell_par2_median[$i])) lweight 3.5
        points plot_x plot_y
        errorbar plot_x plot_y plot_err_H68 2
        errorbar plot_x plot_y plot_err_L68 4
    }
    # 
    crabPlotDefaultPenForConnect
    ctype default
    ltype 1
    rel $fx1 0 draw $fx2 0
    # 
    location 6500 31000 16500 31000
    crabPlotClosePS



plot_simu_stats_2D_nom_S_diff_vs_peak_SNR
    # 
    # make plots
    # 
    load crabPlot.sm
    load crabPlotColorbar.sm
    crabPlotOpenPS $outdir"/Plot_nom_S_diff_vs_peak_SNR.eps"
    crabPlotDefaultPenForBox
    location 7000 30500 16000 30500
    limits 0 3 -4 4
    ticksize -1 10 0 0
    box
    crabPlotDefaultPenForTitle
    xlabel $(par1_str)
    ylabel "(S_{in}-S_{out})/e_{S_{out}}"
    # 
    # 
    # make colorbar
    if(is_vector(par2_min)) {
        set cbar_min = par2_min
    } else {
        vecminmax par2 cbar_min cbar_max
        set cbar_min = $cbar_min
    }
    if(is_vector(par2_max)) {
        set cbar_max = par2_max
    } else {
        vecminmax par2 cbar_max cbar_max
        set cbar_max = $cbar_max
    }
    plotColorBar 0.6 0.85 0 0 par2 $(cbar_min) $(cbar_max) $(par2_str)
    # 
    crabPlotDefaultPenForPoints
    ptype 4 1
    lweight 0.8
    expand 0.5
    set sort_xx = lg(par1)
    set sort_yy = S_diff/e_S_out
    set sort_cc = par2_Colors
    sort {sort_cc sort_xx sort_yy}
    foreach var {sort_cc sort_xx sort_yy} {set $var = reverse($var)}
    do i=0,dimen(sort_cc)-1 {
        ctype $(sort_cc[$i])
        set plot_x = sort_xx[$i]
        set plot_y = sort_yy[$i]
        points plot_x plot_y
    }
    # 
    # plot bin cell median and sigma (error bar)
    crabPlotDefaultPenForPoints
    do i=0,dimen(cell_id)-1 {
        set plot_x = lg(cell_par1_median[$i])
        set plot_y = cell_median[$i]/cell_e_S_out_median[$i]
        set plot_err_H68 = cell_scatter[$i]/cell_e_S_out_median[$i]
        set plot_err_L68 = cell_scatter[$i]/cell_e_S_out_median[$i]
        ctype white lweight 6.5
        points plot_x plot_y
        errorbar plot_x plot_y plot_err_H68 2
        errorbar plot_x plot_y plot_err_L68 4
        ctype $(plotColorBar_value2color(cell_par2_median[$i])) lweight 3.5
        points plot_x plot_y
        errorbar plot_x plot_y plot_err_H68 2
        errorbar plot_x plot_y plot_err_L68 4
    }
    # 
    crabPlotDefaultPenForConnect
    ctype default
    ltype 1
    rel $fx1 0 draw $fx2 0
    # 
    location 6500 31000 16500 31000
    crabPlotClosePS
























